{"version":3,"sources":["../src/index.ts","../src/utils/video.ts","../src/utils/parserTitles.ts","../src/utils/fileExist.ts","../src/utils/audio.ts"],"sourcesContent":["import Video from './utils/video';\nimport Audio from './utils/audio';\n\nexport {\n  Video,\n  Audio,\n};\n","import ytdl, { videoFormat } from '@distube/ytdl-core';\nimport path from 'path';\nimport ffmpeg from 'ffmpeg-static';\nimport cp from 'child_process';\nimport parser from './parserTitles';\nimport { ConvertOptions, FFmpegProcess, MessageResult } from '../types';\nimport fileExist from './fileExist';\n\nasync function Video(options : ConvertOptions) {\n  const {\n    directory = './', itag, url, title, onDownloading, ffmpegPath,\n  } = options;\n\n  const tracker = {\n    audio: {\n      total: null,\n      downloaded: null,\n    },\n    video: {\n      total: null,\n      downloaded: null,\n    },\n  };\n\n  // Info Youtube\n  const videoInfo = await ytdl.getInfo(url);\n  let format : videoFormat;\n  if (itag) { format = videoInfo.formats.find((fm) => fm.itag === itag); }\n  const fileTitle = title || parser(videoInfo.videoDetails.title);\n  // Stream audio and video\n  const audio = ytdl(url, {\n    filter: 'audioonly',\n    quality: 'lowestaudio',\n  }).on('progress', (_, downloaded, total) => {\n    tracker.audio = { downloaded, total };\n  });\n  const video = ytdl(url, {\n    quality: format?.itag || 'highestvideo',\n    dlChunkSize: 1024 * 1024 * 1024,\n  }).on('progress', (_, downloaded, total) => {\n    tracker.video = { downloaded, total };\n  });\n\n  const pathname = path.resolve(process.cwd(), directory, `${fileTitle}.mp4`);\n\n  const promise = new Promise<MessageResult>((resolve, reject) => {\n    if (fileExist(pathname)) {\n      resolve({\n        message: `File already downloaded in ${pathname}`, error: false, videoInfo, pathfile: pathname,\n      });\n    } else {\n      const ffmpegProcess = cp.spawn(ffmpegPath || ffmpeg, [\n        '-loglevel', '8', '-hide_banner',\n        '-progress', 'pipe:3',\n        '-i', 'pipe:4',\n        '-i', 'pipe:5',\n        '-map', '0:a',\n        '-map', '1:v',\n        '-c:v', 'copy',\n        `${pathname}`,\n      ], {\n        windowsHide: true,\n        stdio: [\n          'inherit', 'inherit', 'inherit',\n          'pipe', 'pipe', 'pipe',\n        ],\n      }) as unknown as FFmpegProcess;\n\n      if (ffmpegProcess === undefined) {\n        reject(new Error('Cannot initialize ffmpeg'));\n      }\n\n      ffmpegProcess.stdio[3].on('data', () => {\n        const videoTotal = (tracker.video.downloaded / tracker.video.total) * 100;\n        const audioTotal = (tracker.audio.downloaded / tracker.audio.total) * 100;\n        const total = ((videoTotal + audioTotal) / 2);\n        const videoSize = tracker.video.total + tracker.audio.total;\n        // eslint-disable-next-line object-curly-newline\n        if (onDownloading)onDownloading({ percentage: total, size: videoSize });\n      });\n\n      ffmpegProcess.on('close', () => {\n        resolve({\n          message: `File in ${pathname}`, error: false, videoInfo, pathfile: pathname,\n        });\n      });\n\n      audio.pipe(ffmpegProcess.stdio[4]);\n      video.pipe(ffmpegProcess.stdio[5]);\n    }\n  });\n  return promise;\n}\nexport default Video;\n","const parserTitles = (title:string) => {\n  const regex = /[\\\\,:,?,|,Â¿,*,<,>,\",/]/g;\n  return title.replace(regex, '');\n};\n\nexport default parserTitles;\n","import fs from 'fs';\n\nconst fileExist = (pathname:string) => fs.existsSync(pathname);\n\nexport default fileExist;\n","import ytdl, { videoFormat } from '@distube/ytdl-core';\nimport path from 'path';\nimport ffmpeg from 'ffmpeg-static';\nimport cp from 'child_process';\nimport ffmMT from 'ffmetadata';\nimport parser from './parserTitles';\nimport { ConvertOptions, FFmpegProcess, MessageResult } from '../types';\nimport fileExist from './fileExist';\n\nasync function Audio(options : ConvertOptions) {\n  const {\n    directory = './', itag, url, title, onDownloading, ffmpegPath,\n  } = options;\n\n  const tracker = {\n    total: null,\n    downloaded: null,\n  };\n\n  // Info Youtube\n  const videoInfo = await ytdl.getInfo(url);\n  let format : videoFormat;\n  if (itag) { format = videoInfo.formats.find((fm) => fm.itag === itag); }\n  const fileTitle = title || parser(videoInfo.videoDetails.title);\n\n  // Stream audio and video\n  const stream = ytdl(url, {\n    filter: 'audioonly',\n    quality: format?.itag || 'highestaudio',\n  }).on('progress', (_, downloaded, total) => {\n    tracker.total = total;\n    tracker.downloaded = downloaded;\n  });\n\n  const pathname = path.resolve(process.cwd(), directory, `${fileTitle}.mp3`);\n\n  const promise = new Promise<MessageResult>((resolve, reject) => {\n    if (fileExist(pathname)) {\n      resolve({\n        message: `File already downloaded in ${pathname}`, error: false, videoInfo, pathfile: pathname,\n      });\n    } else {\n      const ffmpegProcess : FFmpegProcess = cp.spawn(ffmpegPath || ffmpeg, [\n        '-loglevel', '8', '-hide_banner',\n        '-progress', 'pipe:3',\n        '-i', 'pipe:4',\n        `${pathname}`,\n      ], {\n        windowsHide: true,\n        stdio: [\n          'inherit', 'inherit', 'inherit',\n          'pipe', 'pipe', 'pipe',\n        ],\n      });\n      if (ffmpegProcess === undefined) {\n        reject(new Error('Cannot initialize ffmpeg'));\n      }\n      ffmpegProcess.stdio[3].on('data', () => {\n        const percentage = ((tracker.downloaded / tracker.total) * 100);\n        const size = tracker.total;\n        if (onDownloading) onDownloading({ percentage, size });\n      });\n\n      ffmpegProcess.on('close', () => {\n        const metadata = {\n          artist: videoInfo.videoDetails.author.name,\n          title: fileTitle,\n          album: videoInfo.videoDetails.author.name,\n        };\n        ffmMT.write(pathname, metadata, (err) => {\n          if (err) throw err;\n          resolve({\n            message: `File in ${pathname}`, error: false, videoInfo, pathfile: pathname,\n          });\n        });\n      });\n\n      stream.pipe(ffmpegProcess.stdio[4]);\n    }\n  });\n  return promise;\n}\nexport default Audio;\n"],"mappings":"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","names":["fs","ytdl","path","cp","ffmpeg","import_ytdl_core","import_path","import_ffmpeg_static","import_child_process","ytdl","path","cp","ffmpeg","ffmMT"]}